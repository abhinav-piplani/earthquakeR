annotations <- eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.))
annotations
eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>% eq_map()
library(testthat)
data <- eq_data()
expect_true(is.data.frame(data))
raw_data <- data.frame(251,7,9,"25.500","35.500","GREECE:  CRETE")
colnames(raw_data) <- c("YEAR", "MONTH", "DAY", "LONGITUDE",
"LATITUDE", "LOCATION_NAME")
data <- raw_data %>% eq_clean_data() %>% eq_location_clean()
clean_date <-  data$DATE[1]
clean_location <- data$LOCATION_NAME[1]
expect_equal(clean_location, "Greece  Crete")
bc_check <- data$neg.date[1]
expect_equal(bc_check, 0)
g <- eq_data() %>%
dplyr::filter(YEAR > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
expect_is(g, "ggplot")
dplyr::filter(YEAR > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline() +
geom_timeline_label()
expect_is(g, "ggplot")
g <- eq_data() %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
?year
library(lubridate)
g <- eq_data() %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
expect_is(g, "ggplot")
g <-  eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
expect_is(g, "ggplot")
g <- eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline() +
geom_timeline_label()
expect_is(g, "ggplot")
a <-  leaflet::leaflet(data) %>%
leaflet::addTiles() %>%
leaflet::addCircleMarkers(
radius = ifelse(is.na(data[["EQ_PRIMARY"]]), 1, data[["EQ_PRIMARY"]]),
color = ifelse(is.na(data[["EQ_PRIMARY"]]), "grey", "blue"),
stroke = TRUE,
fillOpacity = 0.5,
lng = ~ LONGITUDE,
lat = ~ LATITUDE,
popup = data[[annot_col]]
)
a <-  eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>% eq_map()
class(a)
temp.object <- eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(year(DATE) > 2000 & !neg.date & COUNTRY %in% c("MEXICO")) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
expect_is(temp.object, "leaflet")
expect_is(temp.object, "htmlwidget")
data <- data.frame("Pompeii", "5.2", NA)
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS")
labels <- data %>% eq_create_label()
expect_equal(length(labels), 1)
label <- labels[1]
expect_equal(label, "<b>Location:</b> Pompeii <br /> <b>Magnitude:</b> 5.2 <br />")
data <- data.frame("Pompeii", "5.2", NA)
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS")
data
labels <- data %>% eq_create_label()
data <- data.frame("XYZ", "3.2", NA)
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS")
data <- data.frame("XYZ", "3.2")
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY")
labels <- data %>% eq_create_label()
data <- data.frame("XYZ", "3.2", NA)
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS")
data
data <- data.frame("XYZ", "3.2", NA, NA)
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS", "DATE")
labels <- data %>% eq_create_label()
Sys.Date()
data <- data.frame("XYZ", 3.2, 47, "2018-01-11")
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS", "DATE")
labels <- data %>% eq_create_label()
labels
expect_equal(length(labels), 1)
data <- data.frame("XYZ", 3.2, 47, "2018-01-11")
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS", "DATE")
labels <- data %>% eq_create_label()
expect_equal(length(labels), 1)
expect_equal(labels, "<b>Date: </b> 2018-01-11 <br/> <b>Location: </b> XYZ <br/> <b>Magnitude: </b> 3.2 <br/>")
labels
expect_equal(labels, "<b>Date: </b> 2018-01-11 <br/> <b>Location: </b> XYZ <br/> <b>Magnitude: </b> 3.2 <br/> ")
raw_data <- data.frame(251,7,9,"25.500","35.500","GREECE:  CRETE")
colnames(raw_data) <- c("YEAR", "MONTH", "DAY", "LONGITUDE",
"LATITUDE", "LOCATION_NAME")
data <- raw_data %>% eq_clean_data() #%>% eq_location_clean()
clean_date <-  data$DATE[1]
clean_location <- data$LOCATION_NAME[1]
expect_equal(clean_location, "Greece  Crete")
bc_check <- data$neg.date[1]
expect_equal(bc_check, 0)
raw_data <- data.frame(251,7,9,"25.500","35.500","GREECE:  CRETE")
colnames(raw_data) <- c("YEAR", "MONTH", "DAY", "LONGITUDE",
"LATITUDE", "LOCATION_NAME")
data <- raw_data %>% eq_clean_data() #%>% eq_location_clean()
bc_check <- data$neg.date[1]
expect_equal(bc_check, 0)
raw_data <- data.frame(251,7,9,"25.500","35.500","GREECE:  CRETE")
colnames(raw_data) <- c("YEAR", "MONTH", "DAY", "LONGITUDE",
"LATITUDE", "LOCATION_NAME")
data <- raw_data %>% eq_clean_data()
expect_equal(data$neg.date[1], 0)
raw_data <- data.frame(251,7,9,"25.500","35.500","GREECE:  CRETE")
colnames(raw_data) <- c("YEAR", "MONTH", "DAY", "LONGITUDE",
"LATITUDE", "LOCATION_NAME")
data <- raw_data %>% eq_clean_data() %>% eq_location_clean()
expect_equal(data$LOCATION_NAME[1], "Greece  Crete")
g <-  eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
expect_is(g, "ggplot")
g <- eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline() +
geom_timeline_label()
expect_is(g, "ggplot")
library(earthquakeR)
library(earthquakeR)
getwd()
library(earthquakeR)
data <- data.frame("XYZ", 3.2, 47, "2018-01-11")
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS", "DATE")
labels <- data %>% eq_create_label()
expect_equal(length(labels), 1)
expect_equal(labels, "<b>Date: </b> 2018-01-11 <br/> <b>Location: </b> XYZ <br/> <b>Magnitude: </b> 3.2 <br/> ")
library(earthquakeR)
library(earthquakeR)
library(earthquakeR)
library(testthat)
library(earthquakeR)
test_that( {
temp.object <- eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(year(DATE) > 2000 & !neg.date & COUNTRY %in% c("MEXICO")) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
expect_is(temp.object, "leaflet")
expect_is(temp.object, "htmlwidget")
})
library(testthat)
library(earthquakeR)
test_that( {
temp.object <- eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(year(DATE) > 2000 & !neg.date & COUNTRY %in% c("MEXICO")) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
expect_is(temp.object, "leaflet")
expect_is(temp.object, "htmlwidget")
})
library(testthat)
library(earthquakeR)
library(lubridate)
# Check eq_data
test_that( {
data <- eq_data()
expect_true(is.data.frame(data))
})
library(testthat)
library(earthquakeR)
library(lubridate)
# Check eq_data
test_that( {
data <- eq_data()
expect_true(is.data.frame(data))
})
test_that("eq_clean_data cleans the data", {
data <- eq_data()
expect_true(is.data.frame(data))
})
library(earthquakeR)
?'%>%'
library(earthquakeR)
devtools::document()
library(earthquakeR)
devtools::use_vignette("introduction")
data <- eq_data()
)
data <- eq_data()
data <- eq_clean_data(data) %>% eq_location_clean()
data <- eq_clean_data(data) %>% eq_location_clean()
data <- eq_clean_data(data) %>% eq_location_clean()
data <- eq_data()
str(data)
data <- eq_data()
head(data)
data <- eq_data()
print(head(data))
data <- eq_data()
print(head(data))
data <- eq_data()
head(data)
data <- eq_data()
library(earthquakeR)
library(earthquakeR)
data <- eq_data()
library(earthquakeR)
library(earthquakeR)
library(earthquakeR)
data <- eq_data()
library(earthquakeR)
library(dplyr)
library(ggplot2)
library(grid)
library(leaflet)
library(lubridate)
library(magrittr)
library(readr)
library(stringi)
data <- eq_data()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
library(earthquakeR)
library(dplyr)
library(ggplot2)
library(grid)
library(leaflet)
library(lubridate)
library(magrittr)
library(readr)
library(stringi)
data <- eq_data()
head(data)
data <- eq_data()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
library(earthquakeR)
library(dplyr)
library(ggplot2)
library(grid)
library(leaflet)
library(lubridate)
library(magrittr)
library(readr)
library(stringi)
data <- eq_data()
head(data)
data <- eq_data()
head(data)
data <- eq_data()
head(data)
data <- eq_data()
head(data)
data <- eq_data()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
g <-  data %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
g
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
g <-  data %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
g
g <- g +  geom_timeline_label()
g
g <-  data %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
g
g <- g +  geom_timeline_label()
g
library(earthquakeR)
library(dplyr)
library(ggplot2)
library(grid)
library(leaflet)
library(lubridate)
library(magrittr)
library(readr)
library(stringi)
library(earthquakeR)
library(dplyr)
library(ggplot2)
library(grid)
library(leaflet)
library(lubridate)
library(magrittr)
library(readr)
library(stringi)
#knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
data <- eq_data()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
g <-  data %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
g
g <-  data %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline() +
geom_timeline_label()
g
library(earthquakeR)
library(dplyr)
library(ggplot2)
library(grid)
library(leaflet)
library(lubridate)
library(magrittr)
library(readr)
library(stringi)
#knitr::opts_chunk$set(echo = TRUE, tidy = TRUE)
data <- eq_data()
head(data)
data <- eq_clean_data(data) %>% eq_location_clean()
head(data)
g <-  data %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline()
g
g <-  data %>%
dplyr::filter(year(DATE) > 2000  & COUNTRY %in% c("CANADA")) %>%
dplyr::mutate(TOTAL_DEATHS = as.numeric(TOTAL_DEATHS),
EQ_PRIMARY = as.numeric(EQ_PRIMARY)) %>%
ggplot2::ggplot(ggplot2::aes(x = DATE,
y = COUNTRY,
colour = TOTAL_DEATHS,
size = EQ_PRIMARY
)) +
geom_timeline() +
labs(size = "Richter scale value", color = "# deaths") +
geom_timeline_label(ggplot2::aes(label = LOCATION_NAME), n_max = 3)
g
data %>%
dplyr::filter(year(DATE) > 2000 & !neg.date & COUNTRY %in% c("MEXICO")) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.))
#  eq_data("inst/extdata/signif.txt") %>%
#   # dplyr::filter(YEAR > 2000 & !neg.date & COUNTRY %in% c("MEXICO")) %>%
#   dplyr::filter(YEAR > 2000 & neg.date == 0 & COUNTRY %in% c("MEXICO")) %>%
#      dplyr::mutate(popup_text = eq_create_label(.)) %>%
#   eq_map(annot_col = "popup_text")
eq_data("inst/extdata/signif.txt") %>%
# dplyr::filter(YEAR > 2000 & !neg.date & COUNTRY %in% c("MEXICO")) %>%
dplyr::filter(YEAR > 2000 & neg.date == 0 & COUNTRY %in% c("MEXICO")) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
data %>%
dplyr::filter(YEAR > 2000 & neg.date == 0 & COUNTRY %in% c("MEXICO")) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
eq_create_label <- function(data) {
vars <- colnames(data)
# Generating the HTML code
annotation <- paste(
# ifelse("DATE" %in% vars & !is.na(data$DATE), paste("<b>Date: </b>", data$DATE, "<br/>"), ""),
ifelse("LOCATION_NAME" %in% vars & !is.na(data$LOCATION_NAME), paste("<b>Location: </b>", data$LOCATION_NAME, "<br/>"), ""),
ifelse("EQ_PRIMARY" %in% vars & !is.na(data$EQ_PRIMARY), paste("<b>Magnitude: </b>", data$EQ_PRIMARY, "<br/>"), ""),
ifelse("DEATHS" %in% vars & !is.na(data$DEATHS), paste("<b>Total deaths: </b>", data$DEATHS, "<br/>"), ""))
# Checking presence of required variables
if(
#"DATE" %in% vars +
"LOCATION_NAME" %in% vars +
"DEATHS" %in% vars + "EQ_PRIMARY" %in% vars == 0) {
warnings("\n All the label variables are missing from the given dataset.\n") }
return(annotation)
}
eq_clean_data(eq_data()) %>% eq_location_clean() %>%
dplyr::filter(COUNTRY == "MEXICO" & lubridate::year(DATE) >= 2000) %>%
dplyr::mutate(popup_text = eq_create_label(.))
eq_data("inst/extdata/signif.txt") %>%
# dplyr::filter(YEAR > 2000 & !neg.date & COUNTRY %in% c("MEXICO")) %>%
dplyr::filter(YEAR > 2000 & neg.date == 0 & COUNTRY %in% c("MEXICO")) %>%
dplyr::mutate(popup_text = eq_create_label(.)) %>%
eq_map(annot_col = "popup_text")
library(earthquakeR)
library(earthquakeR)
data <- data.frame("XYZ", 3.2, 47)
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS")
labels <- data %>% eq_create_label()
expect_equal(length(labels), 1)
library(testthat)
library(earthquakeR)
library(lubridate)
data <- data.frame("XYZ", 3.2, 47)
colnames(data) <- c("LOCATION_NAME", "EQ_PRIMARY", "TOTAL_DEATHS")
labels <- data %>% eq_create_label()
expect_equal(length(labels), 1)
labels
library(earthquakeR)
